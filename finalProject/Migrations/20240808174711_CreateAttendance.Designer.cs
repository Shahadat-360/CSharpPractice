// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using finalProject;

#nullable disable

namespace finalProject.Migrations
{
    [DbContext(typeof(AttendanceSystemDbContext))]
    [Migration("20240808174711_CreateAttendance")]
    partial class CreateAttendance
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("finalProject.Admin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Admins");
                });

            modelBuilder.Entity("finalProject.Attendance", b =>
                {
                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<bool>("IsPresent")
                        .HasColumnType("bit");

                    b.Property<int>("Name")
                        .HasColumnType("int");

                    b.HasKey("StudentId", "CourseId");

                    b.ToTable("Attendances");
                });

            modelBuilder.Entity("finalProject.Course", b =>
                {
                    b.Property<int>("CourseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CourseId"));

                    b.Property<int?>("AdminId")
                        .HasColumnType("int");

                    b.Property<double>("Fees")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CourseId");

                    b.HasIndex("AdminId");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("finalProject.CourseSchedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AdminId")
                        .HasColumnType("int");

                    b.Property<int?>("CourseId")
                        .HasColumnType("int");

                    b.Property<string>("Day")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeOnly>("EndingTime")
                        .HasColumnType("time");

                    b.Property<TimeOnly>("StartingTime")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.HasIndex("AdminId");

                    b.HasIndex("CourseId");

                    b.ToTable("CourseSchedule");
                });

            modelBuilder.Entity("finalProject.EnrolledCourse", b =>
                {
                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<int?>("AdminId")
                        .HasColumnType("int");

                    b.HasKey("StudentId", "CourseId");

                    b.HasIndex("AdminId");

                    b.ToTable("EnrolledCourses");
                });

            modelBuilder.Entity("finalProject.Student", b =>
                {
                    b.Property<int>("StudentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StudentId"));

                    b.Property<int?>("AdminId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StudentId");

                    b.HasIndex("AdminId");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("finalProject.Teacher", b =>
                {
                    b.Property<int>("TeacherId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TeacherId"));

                    b.Property<int?>("AdminId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TeacherId");

                    b.HasIndex("AdminId");

                    b.ToTable("Teachers");
                });

            modelBuilder.Entity("finalProject.TeacherCourse", b =>
                {
                    b.Property<int>("TeacherId")
                        .HasColumnType("int");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.HasKey("TeacherId", "CourseId");

                    b.HasIndex("CourseId");

                    b.ToTable("TeacherCourse");
                });

            modelBuilder.Entity("finalProject.Course", b =>
                {
                    b.HasOne("finalProject.Admin", null)
                        .WithMany("Courses")
                        .HasForeignKey("AdminId");
                });

            modelBuilder.Entity("finalProject.CourseSchedule", b =>
                {
                    b.HasOne("finalProject.Admin", null)
                        .WithMany("CourseSchedules")
                        .HasForeignKey("AdminId");

                    b.HasOne("finalProject.Course", null)
                        .WithMany("CourseSchedules")
                        .HasForeignKey("CourseId");
                });

            modelBuilder.Entity("finalProject.EnrolledCourse", b =>
                {
                    b.HasOne("finalProject.Admin", null)
                        .WithMany("EnrolledCourses")
                        .HasForeignKey("AdminId");
                });

            modelBuilder.Entity("finalProject.Student", b =>
                {
                    b.HasOne("finalProject.Admin", null)
                        .WithMany("students")
                        .HasForeignKey("AdminId");
                });

            modelBuilder.Entity("finalProject.Teacher", b =>
                {
                    b.HasOne("finalProject.Admin", null)
                        .WithMany("teachers")
                        .HasForeignKey("AdminId");
                });

            modelBuilder.Entity("finalProject.TeacherCourse", b =>
                {
                    b.HasOne("finalProject.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("finalProject.Admin", b =>
                {
                    b.Navigation("CourseSchedules");

                    b.Navigation("Courses");

                    b.Navigation("EnrolledCourses");

                    b.Navigation("students");

                    b.Navigation("teachers");
                });

            modelBuilder.Entity("finalProject.Course", b =>
                {
                    b.Navigation("CourseSchedules");
                });
#pragma warning restore 612, 618
        }
    }
}
